import { TypographyComponentProps } from "@uiComponentTypes";
import { createContext } from "react";

export type UtilityContextType = {
  typography: TypographyComponentProps[];
};

// const ContextValue: UtilityContextType = {
//   typography: [
//     {
//       color: "dark",
//       font: { size: { value: 100 } },
//     },
//     {
//       color: "gradient-1",
//       font: { size: { value: 100 } },
//       text: { align: "center" },
//     },
//   ],
// };

export const UtilityContext = createContext({} as UtilityContextType);

interface IProps {
  value: UtilityContextType;
  children: React.ReactNode;
}

// Define your actions
// const ACTIONS = {
//   SET_VALUE: "SET_VALUE",
//   RESET_VALUE: "RESET_VALUE",
// };

// Create a reducer function
// const reducer = (state:ContextValueType, action: "SET_VALUE") => {
//   switch (action.type) {
//     case ACTIONS.SET_VALUE:
//       return { ...state, value: action.payload };
//     case ACTIONS.RESET_VALUE:
//       return { ...state, value: '' };
//     default:
//       return state;
//   }
// };

const UtilityContextProvider = ({ value, children }: IProps) => {
  // const [state, dispatch] = useReducer(reducer, { value: '' });

  return (
    <UtilityContext.Provider value={value}>{children}</UtilityContext.Provider>
  );
};

export default UtilityContextProvider;
