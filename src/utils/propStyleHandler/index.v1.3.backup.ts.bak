import {
  BackgroundProps,
  BorderProps,
  BorderRadiusProps,
  BoxShadowProps,
  ColorProps,
  ColumnBreakpointProps,
  DisplayProps,
  FlexColumnProps,
  FlexProps,
  FontSizeProps,
  HeightProps,
  MarginProps,
  PaddingProps,
  PositionProps,
  TextAlignProps,
  TextDecorationProps,
  TextTransformProps,
  WidthProps,
} from "@uiTypes";

import { getPaddingStyle } from "./padding";
import { getColorStyle } from "./color";
import { getTextStyle } from "./text";
import { getFontSizeStyle } from "./fontSize";
import { getBackgroundStyle } from "./background";
import { getBorderRadiusStyle } from "./borderRadius";
import { getBorderStyle } from "./border";
import { getMarginStyle } from "./margin";
import { getHeightStyle } from "./height";
import { getWidthStyle } from "./width";
import { getDisplayStyle } from "./display";
import { getFlexColumnStyle } from "./flexColumn";
import { getColumnBreakPointStyle } from "./columnBreakpoints";
import { getFlexStyle } from "./flex";
import { getPositionStyle } from "./position";
import { getStyle } from "./getStyle";

export type PropStyleHanlderProps = BorderProps &
  BackgroundProps &
  BorderRadiusProps &
  BoxShadowProps &
  ColorProps &
  ColumnBreakpointProps &
  DisplayProps &
  FlexProps &
  HeightProps &
  FontSizeProps &
  MarginProps &
  TextDecorationProps &
  TextTransformProps &
  TextAlignProps &
  PositionProps &
  WidthProps &
  PaddingProps & {
    style?: React.CSSProperties;
    flexColumns?: FlexColumnProps;
    className?: string;
  };

/**
 * Handles component props related to styles, generating both inline styles for object values and class names for predefined union strings.
 *
 * @typedef {object} PropStyleHanlderProps
 * @property {BackgroundProps} background - Background-related properties. Object values (e.g., `{ width: 2, color: "black" }`) will generate inline styles. Predefined union strings will generate class names.
 * @property {BorderProps} border - Border-related properties. Object values (e.g., `{ width: 2, color: "black" }`) will generate inline styles. Predefined union strings will generate class names.
 * @property {BorderRadiusProps} borderRadius - Border-radius properties. Object values will be converted to inline styles, while predefined union values will generate class names.
 * @property {ColorProps} color - Color properties, such as text or background color. If an object is passed (e.g., `{ value: "#fff" }`), it returns an inline style. Predefined union strings like `"primary"` return class names.
 * @property {FontSizeProps} fontSize - Font size properties. Object values (e.g., `{ value: 16, unit: "px" }`) return inline styles, whereas predefined union strings (`"sm" | "md" | "lg"`) return class names.
 * @property {PaddingProps} padding - Padding properties. If an object is passed (e.g., `{ top: 10, bottom: 10 }`), it returns inline styles. Predefined strings like `"sm" | "md" | "lg"` return class names.
 * @property {MarginProps} margin - Margin properties. Object values generate inline styles, and predefined union strings generate class names.
 * @property {React.CSSProperties} [userStyle] - Optional user-defined inline styles, allowing further customization of the component's styles.
 *
 * @param {PropStyleHanlderProps} props - The collection of style-related props passed into the component.
 * @returns {object} An object containing two objects:
 *   - `styled` - The props that need calculation, (mostly in object form ie. margin={{top:2,unit:"px"}}) will be handled by propToStyle. PropToStyle has a custom methods for each property and will return a css-friendly string literal. This string literal will be added in the variable `{styled}` to be used in your component.
 *   - `className` - The class names to be applied to the component, generated from predefined union string props. Make sure you add it to your classNames utility or to your component' className={}
 *
 * @example
 * const styles = propStyleHandler({
 *   border: { width: 2, color: "black" }, // inline styles
 *   borderRadius: "rounded", // class name
 *   fontSize: { value: 16, unit: "px" }, // inline style
 *   padding: "sm", // class name
 *   margin: "lg", // class name
 *   userStyle: { display: 'block' }, // additional inline style
 * });
 *
 * // Result:
 * // {
 * //   inline: { borderWidth: "2px", borderColor: "black", fontSize: "16px", display: 'block' },
 * //   className: "borderRadius-rounded p-sm m-lg"
 * // }
 */

export const propStyleHandler = (props: PropStyleHanlderProps) => {
  //Initialize variable
  let styleAsClassNames: string[] = [];
  let styleAsInlineStyle: React.CSSProperties = {};

  //Utility handle for Padding
  const { padding } = props;
  const { classes: paddingClasses, inline: paddingInline } = getStyle.padding({
    padding,
  });
  paddingClasses && styleAsClassNames.push(paddingClasses);
  paddingInline && Object.assign(styleAsInlineStyle, paddingInline);

  //Utility handle for Classes
  const { color } = props;
  const { classes: colorClasses } = getStyle.color(color);
  colorClasses && styleAsClassNames.push(colorClasses);

  //Utility handle for Text
  const { textAlign, textDecoration, textTransform } = props;
  const { classes: textClasses } = getStyle.text({
    textAlign,
    textDecoration,
    textTransform,
  });
  textClasses && styleAsClassNames.push(textClasses);

  //Utility handle for FontSize
  const { fontSize } = props;
  const { classes: fontSizeClasses, inline: fontSizeInline } =
    getStyle.fontSize(fontSize);
  fontSizeClasses && styleAsClassNames.push(fontSizeClasses);
  fontSizeInline && Object.assign(styleAsInlineStyle, fontSizeInline);

  //Utility handle for Background classes
  const { background } = props;
  const { classes: backgroundClasses, inline: backgroundInline } =
    getStyle.background(background);
  backgroundClasses && styleAsClassNames.push(fontSizeClasses);
  backgroundInline && Object.assign(styleAsInlineStyle, backgroundInline);

  //Utility handle for BorderRadius
  const { borderRadius } = props;
  const { classes: borderRadiusClasses, inline: borderRadiusInline } =
    getStyle.borderRadius(borderRadius);
  borderRadiusClasses && styleAsClassNames.push(borderRadiusClasses);
  borderRadiusInline && Object.assign(styleAsInlineStyle, borderRadiusInline);

  //Utility handle for Border
  const { border } = props;
  const { inline: borderInline } = getStyle.border({ border });
  //borderClasses && styleAsClassNames.push(borderClasses);
  borderInline && Object.assign(styleAsInlineStyle, borderInline);

  //Utility handle for Margin
  /**Discriminating Union Margin classes */
  const { margin } = props;
  const { classes: marginClasses, inline: marginInline } = getStyle.margin({
    margin,
  });
  marginClasses && styleAsClassNames.push(marginClasses);
  marginInline && Object.assign(styleAsInlineStyle, marginInline);

  //Utility handle for Height
  const { height } = props;
  const { inline: heightInline } = getStyle.height({ height });
  //heightClasses && styleAsClassNames.push(heightClasses);
  heightInline && Object.assign(styleAsInlineStyle, heightInline);

  //Utility handle for Height
  const { width } = props;
  const { inline: widthInline } = getStyle.width({ width });
  //widthClasses && styleAsClassNames.push(widthClasses);
  width && Object.assign(styleAsInlineStyle, widthInline);

  //User-defined ClassNames
  const { className: userDefinedClassNames } = props;
  userDefinedClassNames && styleAsClassNames.push(userDefinedClassNames);

  //Utility handle for Display
  const { display } = props;
  const { classes: displayClasses } = getStyle.display(display);
  displayClasses && styleAsClassNames.push(displayClasses);

  //Utility handle for BoxShadow
  const { boxShadow } = props;
  boxShadow && styleAsClassNames.push(boxShadow);

  //Utility handle for FlexColumns
  const { flexColumns } = props;
  const { classes: flexColumnClasses } = getStyle.flexColumn(flexColumns);
  flexColumnClasses && styleAsClassNames.push(flexColumnClasses);

  //Utility handle for Responsive Column BreakPoints
  const { xs, sm, md, lg, xl, xxl } = props;
  const { classes: columnBreakPointClasses } = getStyle.columnBreakPoint({
    xs,
    sm,
    md,
    lg,
    xl,
    xxl,
  });
  columnBreakPointClasses && styleAsClassNames.push(columnBreakPointClasses);

  //Utility handle for Flex
  const { flex } = props;
  const { classes: flexClasses } = getStyle.flex(flex);
  flexClasses && styleAsClassNames.push(flexClasses);

  //Utility handle for Flex
  const { position } = props;
  const { inline: positionInline } = getStyle.position({ position });
  positionInline && Object.assign(styleAsInlineStyle, positionInline);

  //User-defined styles
  const { style: userStyle } = props;
  Object.assign(styleAsInlineStyle, convertCSSPropToString(userStyle));

  //CONVERT React.CSSProperties into a CSS-friendly string literal
  let styled: string | undefined =
    convertCSSPropToString(styleAsInlineStyle) ?? undefined;

  //Sanitize classes by removing spaces and undefined.
  const sanitizedstyleAsClassNames = styleAsClassNames.filter((c) => c !== "");
  return {
    className: sanitizedstyleAsClassNames.join(" "),
    styled,
  };
};

const convertCSSPropToString = (cssProp?: React.CSSProperties) => {
  if (!cssProp) return;
  return Object.entries(cssProp)
    .map(([key, value]) => {
      const cssKey = key.replace(
        /[A-Z]/g,
        (match) => `-${match.toLowerCase()}`
      ); // Convert camelCase to kebab-case
      return `${cssKey}: ${value};`;
    })
    .join(" ");
};
