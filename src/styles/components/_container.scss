@use "../abstracts/mixins" as mixins;
@use "../base/variables" as var;
@use "sass:map";

$sizes: xs, sm, md, lg, xl, xxl;

%grid-column {
  position: relative;
  width: 100%;
  min-height: 1px; // Prevent columns from collapsing when empty
  //padding-right: 15px;
  //padding-left: 15px;
}

// col-{sizes}-{num} -> col-lg-12
@mixin makeCol($values) {
  @each $value in $values {
    @for $i from 1 through 12 {
      $val: calc(($i/12) * 100);
      $valAsPercent: calc(100 / $i);
      .flex-#{$value}-#{$i} > * {
        @include mixins.respondTo($value) {
          // width: #{$val}#{"%"};
          -webkit-box-flex: 0;
          -ms-flex: 0 0 #{$valAsPercent}#{"%"};
          flex: 0 0 #{$valAsPercent}#{"%"};
          max-width: #{$valAsPercent}#{"%"};
        }
      }
      .col-#{$value}-#{$i} {
        @include mixins.respondTo($value) {
          // width: #{$val}#{"%"};
          -webkit-box-flex: 0;
          -ms-flex: 0 0 #{$val}#{"%"};
          flex: 0 0 #{$val}#{"%"};
          max-width: #{$val}#{"%"};
        }
      }
      .col-#{$value}-#{$i},
      .col-#{$value}-auto {
        @extend %grid-column;
      }
    }
  }
}

@include makeCol(var.$sizes);

/** CONTAINERS **/
.container {
  max-width: 1180px;
  margin: 0 auto;
  // display: flex;
}
.container--fluid {
  max-width: 100%;
}
.col {
  // display: flex;
  padding: 10px;
}
.row {
  margin: 0 -10px;
  display: flex;
  flex-wrap: wrap;
  // &.flex > * {
  //   display: flex;
  //   padding: 10px;
  // }
}
[class*="row flex-"] > * {
  display: flex;
}
.container--grid {
  display: grid;
}

.gap-xs {
  gap: var(--spacing-xs);
}
.gap-sm {
  gap: var(--spacing-sm);
}
.gap-md {
  gap: var(--spacing-md);
}
.gap-lg {
  gap: var(--spacing-lg);
}
.gap-xl {
  gap: var(--spacing-xl);
}
.gap-xxl {
  gap: var(--spacing-xxl);
}
/**
* @mixin loopThrough
* A simple mixin that loops through given format: .{className}{value} {
*   {keyName} : {value}
* }
* @param {string} $className - The classname prefix
* @param {string} $keyName - The propertyName of the class
* @param {string[]} $values - The multiple values for multiple classes output
*/
@mixin loopThrough($className, $propertyName, $values) {
  @each $value in $values {
    .#{$className}#{$value} {
      #{$propertyName}: $value;
    }
  }
}

$alignItems: center, start, end, baseline, stretch;
$justifyContent: start, end, center, space-between, space-around, space-evenly;

@include loopThrough("justify-", "justify-content", $justifyContent);
@include loopThrough("justify-self-", "justify-self", $justifyContent);
@include loopThrough("items-", "align-items", $alignItems);
@include loopThrough("items-self", "align-self", $alignItems);
