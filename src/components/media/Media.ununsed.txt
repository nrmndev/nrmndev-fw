import { BaseProps, IconProps } from "@uiTypes";
import { Icon } from "@uiComponents";
import classNames from "classnames";
import { IconType } from "react-icons";

export interface IProps extends BaseProps, Omit<IconProps, "rounded"> {
  heading: string;
  body: JSX.Element;
  link?: string;
  target?: "_blank" | "_self" | "_top" | "_parent";
  roundedIcon?: boolean;
  iconPosition?: "top-left" | "top-center" | "top-right" | "left" | "right";
}

type Icon = {
  icon: {
    content: IconType | React.ReactNode,
    gutter?: "sm" |"md" | "lg"
    position?: "left" | "right"
    size?: "sm" | "md" | "lg"
  }
  title: {
    size? : "h1" | "h2" | "h3" | "h4"
    as? : "h1" | "h2" | "h3"
  }
  body: {
    //...
  }
}

const Media = ({
  link,
  target = "_self",
  icon: IconToRender,
  iconPosition = "left",
  roundedIcon = false,
  heading,
  body,
  ...rest
}: IProps) => {
  const classes = classNames(
    "media",
    `media__icon-${iconPosition}`,
    rest.className
  );

  return (
    <div className={classes}>
      <Icon
        icon={IconToRender}
        variant="outline"
        rounded={roundedIcon}
        className={"media__icon"}
      />
      <div className="media__content">
        <h4 className="media__heading">{heading}</h4>
        <p className="media__body">{body}</p>
      </div>
    </div>
  );
};

export default Media;

// if (link)
//   return (
//     <div className={`media ${rest.className ? rest.className : ""}`}>
//       <a className="media__link" href={link} target={target}>
//         <Icon
//           icon={IconToRender}
//           variant="outline"
//           rounded={roundedIcon}
//           className={`icon--${iconPosition} icon__media`}
//         />

//         <div className="media__content">
//           <h4 className="media__heading">{heading}</h4>
//           <p className="media__body">{body}</p>
//         </div>
//       </a>
//     </div>
//   );
// else
//   return (
//     <div className={`media ${rest.className ? rest.className : ""}`}>
//       <Icon
//         icon={IconToRender}
//         variant="outline"
//         rounded={roundedIcon}
//         className={`icon--${iconPosition}`}
//       />
//       <div className="media__content">
//         <h4 className="media__heading">{heading}</h4>
//         <p className="media__body">{body}</p>
//       </div>
//     </div>
//   );
